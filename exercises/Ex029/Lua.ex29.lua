--[[
Consider all integer combinations of a^b for 2 leq a leq 5 and 2 leq b leq 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32
3^2=9, 3^3=27, 3^4=81, 3^5=243
4^2=16, 4^3=64, 4^4=256, 4^5=1024
5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by ab for 2 leq a leq 100 and 2 leq b leq 100?
--]]

function split(inputstr, sep)
  if sep == nil then
    sep = "%s"
  end
  local tbl = {}
  for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
    table.insert(tbl, str)
  end
  return tbl
end

exec_file_path = arg[0]  -- path of the current executing file
tbl = split(exec_file_path, "\\")
tbl[#tbl] = "bigint.lua"
file_path = table.concat(tbl, "\\")
print(file_path)

-- https://github.com/empyreuma/bigint.lua
bigint = dofile(file_path)

terms = {}
for a=2,100 do
  for b=2,100 do
    bia = bigint.new(a)
    bib = bigint.new(b)
    result = bigint.exponentiate(bia, bib)
    resultstr = bigint.unserialize(result, "string")
    terms[resultstr] = true
    --print(a, b)
  end
end

termscounter = 0
for k,v in pairs(terms) do
  --print(k)
  termscounter = termscounter + 1
end
print(termscounter)  -- 9,183
